#BlueJ class context
comment0.params=playerNumber\ playerName\ playerViewOfBoard\ playerViewOfTileBag\ playerViewOfScoreboard
comment0.target=Player(int,\ java.lang.String,\ Board,\ TileBag,\ Scoreboard)
comment0.text=\r\n\ Constructor\ for\ objects\ of\ class\ Player\r\n
comment1.params=
comment1.target=Player()
comment1.text=\r\n\ NOT\ USED\:\ no-arg\ constructor\ for\ Player.\ Necessary?\ Probably\ not,\ but\ I'll\ leave\ it\ here\ just\ in\ case.\r\n
comment10.params=scoreIncrement
comment10.target=void\ updateCurrentTurnScore(int)
comment10.text=\r\n\ Increment\ the\ current\ player's\ POTENTIAL\ score\ for\ the\ current\ turn\r\n\ (points\ will\ be\ negated\ if\ turn\ is\ forfeited\ or\ tiles\ are\ otherwise\ recalled)\r\n
comment11.params=placedTilePosition\ numberOfTilesPlayed
comment11.target=boolean\ checkTilePlacementPreconditions(int[][],\ int)
comment11.text=\r\n\ A\ "helper"\ method\ that\ returns\ FALSE\:\r\n\ \r\n\ 1)\ ...if\ it\ is\ the\ FIRST\ move\ of\ the\ game\ and\ the\ center\ space\ is\ NOT\ occupied\ \r\n\ 2)\ ...if\ it\ is\ NOT\ the\ first\ move\ of\ the\ game\ and\ none\ of\ the\ currently\ placed\ tiles\r\n\ \ \ \ are\ horizontally\ or\ vertically\ adjacent\ to\ a\ previously\ played\ tile\ (i.e.,\ according\ to\ playerViewOfBoard)\r\n\ \r\n\ If\ the\ method\ returns\ FALSE,\ then\ the\ calling\ method\ will\ display\ an\ error\ message,\ \r\n\ recall\ all\ played\ tiles\ to\ the\ rack,\ and\ restore\ the\ board\ back\ to\ the\ last\ playerViewOfBoard\r\n\ \r\n
comment12.params=placedTilePosition\ numberOfTilesPlayed
comment12.target=boolean\ scoreAllWords(int[][],\ int)
comment12.text=\r\n\ A\ "helper"\ method\ (hence\ private\ visibility)\ for\ checking\ and\ scoring\ words\ played\ during\ the\ current\ turn\r\n\ \r\n\ NOTE\:\ this\ method\ returns\ FALSE\ if\ any\ word\ is\ not\ in\ the\ dictionary\ or\ is\ otherwise\ challenged\r\n\ \ \ \ \ \ \ successfully\ by\ another\ player\r\n\ \ \ \ \ \ \ \r\n\ TODO\:\ This\ method\ is\ rather\ long\ --\ consider\ breaking\ this\ up\ into\ *at\ least\ two*\ methods.\r\n\ \r\n
comment13.params=queryWord
comment13.target=boolean\ inDictionary(java.lang.String)
comment13.text=\r\n\ Method\ to\ check\ to\ see\ if\ word\ is\ in\ the\ dictionary\ (or\ challenged\ by\ another\ player)\r\n\ NOTE\:\ this\ is\ not\ fully\ implemented\ --\ this\ is\ a\ TODO\ for\ Project\ 4\!\!\r\n
comment14.params=
comment14.target=void\ passTurn()
comment14.text=\r\n\ Method\ for\ allowing\ the\ current\ player\ to\ exchange\ selected\ tiles\ on\ the\ rack\ with\ tiles\r\n\ from\ the\ tileBag.\r\n\ \r\n\ Realistically,\ this\ method\ SHOULD\ allow\ for\ the\ possibility\ that\ anything\ the\ player\r\n\ places\ in\ the\ bag\ could\ be\ what\ is\ immediately\ taken\ out...\ but\ the\ possibility\ of\ that\ happening\r\n\ is\ typically\ "remote\ enough"\ that\ we\ can\ do\ a\ simple\ tile\ exchange\ between\ the\ rack\ and\ the\ tilebag\r\n\ and\ that\ should\ suffice\ for\ our\ purposes.\r\n\ \r\n
comment15.params=
comment15.target=void\ updateGameBoard()
comment15.text=\r\n\ Updates\ the\ game\ board\ with\ all\ changes\ made\ during\ the\ current\ player's\ turn\r\n\ (\ in\ other\ words,\ this\ method\ is\ used\ to\ finally\ "commit"\ the\ player's\ moves\ to\ the\ board\ )\r\n
comment16.params=
comment16.target=void\ setupRack()
comment16.text=\r\n\ Retrieves\ seven\ tiles\ from\ the\ tileBag\ and\ places\ them\ on\ the\ rack\r\n\ (But\ strictly\ speaking\ we\ are\ swapping\ out\ the\ seven\ "null"\ tiles\ initially\ on\ the\r\n\ \ rack\ with\ seven\ lettered\ tiles\ from\ the\ tilebag)\r\n
comment17.params=
comment17.target=void\ refillRack()
comment17.text=\r\n\ Retrieves\ tiles,\ as\ needed,\ from\ the\ tileBag\ and\ places\ them\ on\ the\ rack\r\n\ (takes\ place\ after\ a\ player's\ successful\ move)\ \r\n
comment18.params=
comment18.target=void\ displayRack()
comment18.text=\r\n\ Displays\ the\ current\ player's\ tile\ rack\ in\ an\ easy-to-read\ format\ familiar\ to\ Scrabble\ players.\r\n\ (Also\ displays\ the\ number\ of\ tiles\ remaining\ in\ the\ tile\ bag.)\r\n
comment19.params=
comment19.target=int\ getPlayerRackTotalPointValue()
comment19.text=\r\n\ gets\ the\ current\ point\ value\ of\ playerRack\ (needed\ for\ the\ endgame)\r\n
comment2.params=
comment2.target=void\ startTurn()
comment2.text=\r\n\ Start\ turn\ for\ the\ current\ player\r\n
comment20.params=rackPosition
comment20.target=void\ exchangeTile(int)
comment20.text=\r\n\ Draw\ tile\ from\ bag\ and\ place\ on\ Rack\ in\ position\ i\ (exchanging\ with\ a\ "null"\ tile\ on\ the\ Rack)\r\n
comment21.params=rackPosition\ boardRow\ boardCol
comment21.target=void\ placeTileOnBoard(int,\ int,\ int)
comment21.text=\r\n\ Take\ tile\ from\ rack\ position\ i\ and\ place\ on\ board\ at\ coordinates\ (\ boardRow\ ,\ boardCol\ )\r\n
comment22.params=
comment22.target=void\ confirmQuit()
comment22.text=\r\n\ Confirm\ the\ quit\ command\r\n
comment3.params=
comment3.target=void\ displayMainPlayerMenu()
comment3.text=\r\n\ Displays\ the\ current\ options\ available\ to\ the\ player\ at\ the\ start\ of\ his/her\ turn.\r\n
comment4.params=s1\ s2\ s3\ s4
comment4.target=void\ printStacks(java.util.Stack,\ java.util.Stack,\ java.util.Stack,\ java.util.Stack)
comment5.params=
comment5.target=int\ playWord()
comment5.text=\r\n\ Method\ for\ enabling\ player\ to\ place\ tiles\ and\ form\ words...\ the\ ESSENCE\ of\ the\ game,\ amirite?\!?\r\n
comment6.params=
comment6.target=java.lang.String\ getPlayerName()
comment6.text=\r\n\ retrieves\ the\ current\ player's\ name\r\n
comment7.params=
comment7.target=int\ getPlayerNumber()
comment7.text=\r\n\ retrieves\ the\ current\ player's\ number\r\n
comment8.params=
comment8.target=int\ getPlayerScore()
comment8.text=\r\n\ Retrieves\ the\ current\ player's\ score\r\n
comment9.params=finalTurnScore
comment9.target=void\ updatePlayerScore(int)
comment9.text=\r\n\ Alters\ the\ current\ player's\ score\ by\ the\ given\ amount\ at\ the\ end\ of\ the\ player's\ turn\r\n
numComments=23
